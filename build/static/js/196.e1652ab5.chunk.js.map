{"version":3,"sources":["@core/auth/jwt/jwtDefaultConfig.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js","@core/auth/jwt/jwtService.js","views/pages/authentication/Register.js","@core/components/input-password-toggle/index.js"],"names":["loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","appiaLoginEndpoint","process","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","jwt","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","accessToken","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","push","localStorage","getItem","value","setItem","args","post","getRefreshToken","Register","ability","useContext","AbilityContext","useSkin","skin","history","useHistory","dispatch","useDispatch","useState","email","setEmail","errors","setErrors","username","setUsername","password","setPassword","terms","setTerms","illustration","source","require","default","Terms","className","href","onClick","e","preventDefault","to","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","action","onSubmit","event","length","useJwt","register","res","arr","property","console","user","update","handleLogin","catch","err","log","for","required","autoFocus","type","placeholder","name","onChange","errs","target","classnames","Object","keys","AvInput","checked","customInput","label","Ripple","block","color","disabled","size","InputPasswordToggle","props","hideIcon","showIcon","visible","htmlFor","iconSize","rest","inputVisibility","setInputVisibility","addonType","renderIcon","defaultProps"],"mappings":"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","file":"static/js/196.e1652ab5.chunk.js","sourcesContent":["// Api Url\nexport const apiUrl = process.env.REACT_APP_API_ENDPOINT\n\n// ** Auth Endpoints\nexport default {\n  loginEndpoint: '/jwt/login',\n  registerEndpoint: '/jwt/register',\n  refreshEndpoint: '/jwt/refresh-token',\n  logoutEndpoint: '/jwt/logout',\n  appiaLoginEndpoint: `${apiUrl}/admin/sign_in`,\n\n  // ** This will be prefixed in authorization header with token\n  // ? e.g. Authorization: Bearer <token>\n  tokenType: 'Bearer',\n\n  // ** Value of this property will be used as key to store JWT token in storage\n  storageTokenKeyName: 'accessToken',\n  storageRefreshTokenKeyName: 'refreshToken'\n}\n","// ** Core JWT Import\nimport useJwt from '@src/@core/auth/jwt/useJwt'\n\nconst { jwt } = useJwt({})\n\nexport default jwt\n","// ** JWT Service Import\nimport JwtService from './jwtService'\n\n// ** Export Service as useJwt\nexport default function useJwt(jwtOverrideConfig) {\n  const jwt = new JwtService(jwtOverrideConfig)\n\n  return {\n    jwt\n  }\n}\n","import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  // login(...args) {\n  //   return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  // }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.appiaLoginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n","import { Fragment, useState, useContext } from 'react'\nimport classnames from 'classnames'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { handleLogin } from '@store/actions/auth'\nimport { Link, useHistory } from 'react-router-dom'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\nimport { AvForm, AvInput, AvCheckboxGroup, AvCheckbox } from 'availity-reactstrap-validation-safe'\nimport { Row, Col, CardTitle, CardText, FormGroup, Label, Button } from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst Register = () => {\n  const ability = useContext(AbilityContext)\n\n  const [skin, setSkin] = useSkin()\n\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n\n  const [email, setEmail] = useState('')\n  const [errors, setErrors] = useState({})\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [terms, setTerms] = useState(false)\n\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const Terms = () => {\n    return (\n      <Fragment>\n        I agree to\n        <a className='ml-25' href='/' onClick={e => e.preventDefault()}>\n          privacy policy & terms\n        </a>\n      </Fragment>\n    )\n  }\n\n  const handleSubmit = (event, errors) => {\n    if (errors && !errors.length) {\n      useJwt\n        .register({ username, email, password })\n        .then(res => {\n          if (res.data.error) {\n            const arr = {}\n            for (const property in res.data.error) {\n              if (res.data.error[property] !== null) arr[property] = res.data.error[property]\n            }\n            setErrors(arr)\n            if (res.data.error.email !== null) console.error(res.data.error.email)\n            if (res.data.error.username !== null) console.error(res.data.error.username)\n          } else {\n            setErrors({})\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\n            ability.update(res.data.user.ability)\n            dispatch(handleLogin(data))\n            history.push('/')\n          }\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n  const handleUsernameChange = e => {\n    const errs = errors\n    if (errs.username) delete errs.username\n    setUsername(e.target.value)\n    setErrors(errs)\n  }\n\n  const handleEmailChange = e => {\n    const errs = errors\n    if (errs.email) delete errs.email\n    setEmail(e.target.value)\n    setErrors(errs)\n  }\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ml-1'>Appia</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Adventure starts here 🚀\n            </CardTitle>\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\n\n            <AvForm action='/' className='auth-register-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='register-username'>\n                  Username\n                </Label>\n                <AvInput\n                  required\n                  autoFocus\n                  type='text'\n                  placeholder='johndoe'\n                  id='register-username'\n                  name='register-username'\n                  value={username}\n                  onChange={handleUsernameChange}\n                  className={classnames({ 'border-danger': Object.keys(errors).length && errors.username })}\n                />\n                {Object.keys(errors).length && errors.username ? (\n                  <small className='text-danger'>{errors.username}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <AvInput\n                  required\n                  type='email'\n                  id='register-email'\n                  name='register-email'\n                  value={email}\n                  placeholder='john@example.com'\n                  onChange={handleEmailChange}\n                  className={classnames({ 'border-danger': Object.keys(errors).length && errors.email })}\n                />\n                {Object.keys(errors).length && errors.email ? (\n                  <small className='text-danger'>{errors.email}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <InputPasswordToggle\n                  required\n                  tag={AvInput}\n                  id='register-password'\n                  name='register-password'\n                  value={password}\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <AvCheckboxGroup name='Remember Me' checked={terms} required>\n                <AvCheckbox\n                  customInput\n                  type='checkbox'\n                  id='remember-me'\n                  value='Remember Me'\n                  label={<Terms />}\n                  className='custom-control-Primary'\n                  onChange={e => setTerms(e.target.checked)}\n                />\n              </AvCheckboxGroup>\n              <Button.Ripple\n                block\n                color='primary'\n                disabled={!email.length || !password.length || !username.length || !terms}\n              >\n                Sign up\n              </Button.Ripple>\n            </AvForm>\n            <p className='text-center mt-2'>\n              <span className='mr-25'>Already have an account?</span>\n              <Link to='/login'>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button.Ripple color='facebook'>\n                <Facebook size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='twitter'>\n                <Twitter size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='google'>\n                <Mail size={14} />\n              </Button.Ripple>\n              <Button.Ripple className='mr-0' color='github'>\n                <GitHub size={14} />\n              </Button.Ripple>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Register\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}