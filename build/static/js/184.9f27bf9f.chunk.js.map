{"version":3,"sources":["views/appia/claimedRewards/store/action/index.js","views/appia/claimedRewards/list/columns.js","views/appia/claimedRewards/list/Table.js","views/appia/claimedRewards/list/index.js"],"names":["getAllData","dispatch","a","apiRequest","url","method","response","data","success","type","console","log","error","swal","getFilteredData","claimedRewards","params","q","perPage","page","role","category","queryLowered","toLowerCase","filteredData","filter","claimed","user_id","includes","transaction_id","paginateArray","totalPages","length","getClaim","id","find","i","selectedClaim","getUserClaimHistory","reward_id","columns","name","minWidth","selector","sortable","cell","row","className","to","onClick","store","getState","appiaClaimedRewards","allData","moment","created_at","format","ClaimedTable","useDispatch","useSelector","state","useState","searchTerm","setSearchTerm","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","setUserData","useEffect","isUserLoggedIn","JSON","parse","localStorage","getItem","item","Card","CardHeader","CardTitle","tag","CardBody","Row","Col","md","Label","for","Input","value","placeholder","onChange","e","val","target","sm","CustomInput","parseInt","currentTarget","style","width","padding","backgroundPosition","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","count","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","Object","keys","some","k","slice","dataToRender","ClaimedLIst","Table"],"mappings":"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","file":"static/js/184.9f27bf9f.chunk.js","sourcesContent":["import { paginateArray, sortCompare, apiRequest, swal } from '@utils'\nimport { data } from 'jquery'\n\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/rewards/claims', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_CLAIMED_REWARDS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n// ** Get filtered data on page or row change\nexport const getFilteredData = (claimedRewards, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1, role = null, category = null } = params\n\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = claimedRewards.filter(\n      claimed =>\n        (claimed.user_id.toLowerCase().includes(queryLowered) || claimed.transaction_id.toLowerCase().includes(queryLowered))\n    )\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_CLAIMED_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\nexport const getClaim = (claimedRewards, id) => {\n  return async dispatch => {\n    const claimed = claimedRewards.find(i => i.id === id)\n    dispatch({\n      type: 'GET_CLAIM',\n      selectedClaim: claimed\n    })\n  }\n}\n\nexport const getUserClaimHistory = (reward_id) => {\n\n  return async dispatch => {\n    const response = await apiRequest({ url: `/admin/rewards/claims/${reward_id}`, method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_USER_CLAIM_HISTORY',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Something went wrong with your network.', 'error')\n    }\n\n  }\n}\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { getClaim } from '../store/action'\nimport moment from 'moment'\nimport { store } from '@store/storeConfig/store'\n\n// ** Third Party Components\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { Slack, User, Settings, Database, Edit, MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\nexport const columns = [\n  {\n    name: 'User Id',\n    minWidth: '120px',\n    selector: 'user_id',\n    sortable: true,\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center'>\n        <div className='d-flex flex-column'>\n          <Link\n            to={`/appia/claimedRewards/view/${row.id}`}\n            className='user-name text-truncate mb-0'\n            onClick={() => store.dispatch(getClaim(store.getState().appiaClaimedRewards.allData, row.id))}\n          >\n            <span className='font-weight-bold'>{row.user_id}</span>\n          </Link>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Reward Id',\n    minWidth: '140px',\n    selector: 'reward_id',\n    sortable: true,\n    cell: row => row.reward_id\n  },\n  {\n    name: 'Transaction Id',\n    minWidth: '200px',\n    selector: 'transaction_id',\n    sortable: true,\n    cell: row => row.transaction_id\n  },\n  {\n    name: 'Date',\n    minWidth: '200px',\n    selector: 'created_at',\n    sortable: true,\n    cell: row => moment(row.created_at).format('lll')\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Columns\nimport { columns } from './columns'\n\n\n// ** Store & Actions\nimport { getAllData, getFilteredData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors, isUserLoggedIn } from '@utils'\nimport { Card, CardHeader, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\n\nconst ClaimedTable = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.appiaClaimedRewards)\n\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [userData, setUserData] = useState(null)\n\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllData())\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: searchTerm\n      })\n    )\n  }, [dispatch])\n\n  useEffect(() => {\n    if (isUserLoggedIn() !== null) {\n      setUserData(JSON.parse(localStorage.getItem('userData')))\n    }\n  }, [])\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getFilteredData(store.allData, {\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        q: searchTerm\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: value,\n        q: searchTerm\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: val\n      })\n    )\n  }\n\n  const filteredData = store.allData.filter(\n    item => (item.user_id.toLowerCase() || item.transaction_id.toLowerCase())\n  )\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Math.ceil(filteredData.length / rowsPerPage)\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md=\"4\" className=\"d-flex\">\n              <Label className='mb-0 mt-1' for='search-invoice'>\n                Search:\n            </Label>\n              <Input\n                id='search-invoice'\n                className='ml-50 w-100'\n                type='text'\n                value={searchTerm}\n                placeholder='User and Transaction Id Search'\n                onChange={e => handleFilter(e.target.value)}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n        <Row className='mx-0 mt-3 mb-0'>\n          <Col sm='6'>\n            <div className='d-flex align-items-center'>\n              <Label for='rows-per-page'>Show</Label>\n              <CustomInput\n                className='form-control mx-50'\n                type='select'\n                id='rows-per-page'\n                value={rowsPerPage}\n                onChange={handlePerPage}\n                style={{\n                  width: '10rem',\n                  padding: '0 0.8rem',\n                  backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n                }}\n              >\n                <option value='10'>10</option>\n                <option value='25'>25</option>\n                <option value='50'>50</option>\n              </CustomInput>\n              <Label for='rows-per-page'>Entries</Label>\n            </div>\n          </Col>\n        </Row>\n        <DataTable\n          className='table-hover-animation'\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={dataToRender()}\n        />\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default ClaimedTable\n","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst ClaimedLIst = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default ClaimedLIst\n"],"sourceRoot":""}