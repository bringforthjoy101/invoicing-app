{"version":3,"sources":["views/appia/subscribers/list/columns.js","views/appia/subscribers/store/action/index.js","views/appia/subscribers/list/Table.js","views/appia/subscribers/list/index.js"],"names":["statusObj","Pending","Active","Inactive","columns","name","minWidth","selector","sortable","cell","row","id","email","Badge","className","color","status","pill","moment","created_at","format","UncontrolledDropdown","DropdownToggle","tag","size","DropdownMenu","right","DropdownItem","Link","to","admin_id","onClick","store","dispatch","getFeedback","getState","appiaAdmins","allData","appiaSubscribers","getFilteredData","subscribers","params","a","q","perPage","page","queryLowered","toLowerCase","filteredData","filter","subscribe","includes","type","data","paginateArray","totalPages","length","ContactsList","useDispatch","useSelector","state","useState","searchTerm","setSearchTerm","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","value","label","number","currentStatus","setCurrentStatus","picker","start","Date","parse","end","useEffect","apiRequest","url","method","response","success","console","log","error","swal","item","Card","CardHeader","CardTitle","CardBody","Row","form","Col","lg","md","Label","for","theme","selectThemeColors","isClearable","classNamePrefix","options","onChange","Input","placeholder","e","val","target","sm","CustomInput","parseInt","currentTarget","style","width","padding","backgroundPosition","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","paginationComponent","count","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","dateFilter","contact","isFiltered","Object","keys","some","k","slice","dataToRender","UsersList","Table"],"mappings":"wSAWMA,EAAY,CAChBC,QAAS,gBACTC,OAAQ,gBACRC,SAAU,gBAGCC,EAAU,CACrB,CACEC,KAAM,UACNC,SAAU,QACVC,SAAU,KACVC,UAAU,EACVC,KAAM,SAAAC,GAAG,OAAIA,EAAIC,KAEnB,CACEN,KAAM,QACNC,SAAU,QACVC,SAAU,QACVC,UAAU,EACVC,KAAM,SAAAC,GAAG,OAAIA,EAAIE,QAEnB,CACEP,KAAM,SACNC,SAAU,QACVC,SAAU,SACVC,UAAU,EACVC,KAAM,SAAAC,GAAG,OACP,cAACG,EAAA,EAAD,CAAOC,UAAU,kBAAkBC,MAAOf,EAAUU,EAAIM,QAASC,MAAI,EAArE,SACGP,EAAIM,WAIX,CACEX,KAAM,kBACNC,SAAU,QACVC,SAAU,aACVC,UAAU,EACVC,KAAM,SAAAC,GAAG,OAAIQ,IAAOR,EAAIS,YAAYC,OAAO,SAE7C,CACEf,KAAM,UACNC,SAAU,QACVC,SAAU,WACVC,UAAU,EACVC,KAAM,SAAAC,GAAG,OACP,eAACW,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAgBC,IAAI,MAAMT,UAAU,aAApC,SACE,cAAC,IAAD,CAAcU,KAAM,GAAIV,UAAU,qBAEpC,eAACW,EAAA,EAAD,CAAcC,OAAK,EAAnB,UACE,eAACC,EAAA,EAAD,CACEJ,IAAKK,IACLC,GAAE,4BAAuBnB,EAAIoB,UAC7BhB,UAAU,QACViB,QAAS,kBAAMC,MAAMC,SAASC,YAAYF,MAAMG,WAAWC,YAAYC,QAAS3B,EAAIoB,YAJtF,UAME,cAAC,IAAD,CAAUN,KAAM,GAAIV,UAAU,UAC9B,sBAAMA,UAAU,eAAhB,wBAEF,eAACa,EAAA,EAAD,CACEJ,IAAKK,IACLC,GAAE,4BAAuBnB,EAAIC,IAC7BG,UAAU,QACViB,QAAS,kBAAMC,MAAMC,SAASC,YAAYF,MAAMG,WAAWG,iBAAiBD,QAAS3B,EAAIoB,YAJ3F,UAME,cAAC,IAAD,CAASN,KAAM,GAAIV,UAAU,UAC7B,sBAAMA,UAAU,eAAhB,qBAEF,eAACa,EAAA,EAAD,CAAcb,UAAU,QAAxB,UACE,cAAC,IAAD,CAAQU,KAAM,GAAIV,UAAU,UAC5B,sBAAMA,UAAU,eAAhB,gC,6CC3DCyB,EAAkB,SAACC,EAAaC,GAC3C,8CAAO,WAAMR,GAAN,iCAAAS,EAAA,wDACoDD,EAAjDE,SADH,MACO,GADP,IACoDF,EAAzCG,eADX,MACqB,GADrB,IACoDH,EAA3BI,YADzB,MACgC,EADhC,IACoDJ,EAAjBzB,cADnC,MAC4C,KAD5C,EAGC8B,EAAeH,EAAEI,cACjBC,EAAeR,EAAYS,QAC/B,SAAAC,GAAS,OAAKA,EAAUtC,MAAMmC,cAAcI,SAASL,IACrDI,EAAUlC,UAAYA,GAAUkC,EAAUlC,WAI5CiB,EAAS,CACPmB,KAAM,oBACNC,KAAMC,YAAcN,EAAcJ,EAASC,GAC3CU,WAAYP,EAAaQ,OACzBf,WAdG,2CAAP,uD,yLCqQagB,EA/PM,WAEnB,IAAMxB,EAAWyB,cACX1B,EAAQ2B,aAAY,SAAAC,GAAK,OAAIA,EAAMtB,oBAHhB,EAMWuB,mBAAS,IANpB,mBAMlBC,EANkB,KAMNC,EANM,OAOaF,mBAAS,GAPtB,mBAOlBG,EAPkB,KAOLC,EAPK,OAQaJ,mBAAS,IARtB,mBAQlBK,EARkB,KAQLC,EARK,OASiBN,mBAAS,CAAEO,MAAO,GAAIC,MAAO,gBAAiBC,OAAQ,IATvE,mBASlBC,EATkB,KASHC,EATG,OAUGX,mBAAS,IAVZ,mBAUlBY,EAVkB,KAanBC,GAbmB,KAaXD,GAAUE,KAAKC,MAAMH,EAAO,KACpCI,EAAMJ,GAAUE,KAAKC,MAAMH,EAAO,IAGxCK,qBAAU,WACR7C,ED3CF,uCAAO,WAAMA,GAAN,eAAAS,EAAA,sEACkBqC,YAAW,CAAEC,IAAK,0BAA2BC,OAAQ,OAAShD,GADhF,YACCiD,EADD,6BAGCA,EAAS7B,KAAKA,OAAQ6B,EAAS7B,KAAK8B,QAHrC,gCAIKlD,EAAS,CACbmB,KAAM,sBACNC,KAAM6B,EAAS7B,KAAKA,OANrB,8BASD+B,QAAQC,IAAIH,EAASI,OATpB,gCAYHC,YAAK,QAAS,yCAA0C,SAZrD,4CAAP,uDC4CEtD,EACEM,EAAgBP,EAAMK,QAAS,CAC7BQ,KAAMmB,EACNpB,QAASsB,EACTlD,OAAQuD,EAAcH,MACtBzB,EAAGmB,EACH3C,WAAYsD,OAGf,CAACxC,IAEJ,IA+DMe,EAAehB,EAAMK,QAAQY,QACjC,SAAAuC,GAAI,OAAKA,EAAK5E,MAAMmC,eAAiByC,EAAKrE,WAAW4B,iBAuDvD,OACE,eAAC,WAAD,WACE,eAAC0C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWpE,IAAI,KAAf,6BAEF,cAACqE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,MAAI,EAAChF,UAAU,aAArB,UACE,cAACiF,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAf,SACE,eAAC,IAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,4BACA,cAAC,IAAD,CACEC,MAAOC,IACPC,aAAa,EACbxF,UAAU,eACVyF,gBAAgB,SAChB5F,GAAG,SACH6F,QAxIM,CACpB,CAAEpC,MAAO,GAAIC,MAAO,gBAAiBC,OAAQ,GAC7C,CAAEF,MAAO,UAAWC,MAAO,UAAWC,OAAQ,GAC9C,CAAEF,MAAO,SAAUC,MAAO,SAAUC,OAAQ,GAC5C,CAAEF,MAAO,WAAYC,MAAO,WAAYC,OAAQ,IAqIlCF,MAAOG,EACPkC,SAAU,SAAApD,GACRmB,EAAiBnB,GACjBpB,EACEM,EAAgBP,EAAMK,QAAS,CAC7BQ,KAAMmB,EACNpB,QAASsB,EACTlD,OAAQqC,EAAKe,MACbzB,EAAGmB,aAOf,cAACiC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAf,SACE,eAAC,IAAD,WACE,cAACC,EAAA,EAAD,CAAOpF,UAAU,OAAOqF,IAAI,iBAA5B,qBAGA,cAACO,EAAA,EAAD,CACE/F,GAAG,iBACHyC,KAAK,OACLgB,MAAON,EACP6C,YAAY,eACZF,SAAU,SAAAG,GAAC,OA7HNC,EA6HuBD,EAAEE,OAAO1C,MA5HnDL,EAAc8C,QACd5E,EACEM,EAAgBP,EAAMK,QAAS,CAC7BQ,KAAMmB,EACNpB,QAASsB,EACTlD,OAAQuD,EAAcH,MACtBzB,EAAGkE,EACH1F,WAAYsD,KARG,IAAAoC,kBAkJjB,eAACpB,EAAA,EAAD,WACE,cAACI,EAAA,EAAD,CAAK/E,UAAU,YAAf,SACE,cAACiF,EAAA,EAAD,CAAKgB,GAAG,IAAR,SACE,sBAAKjG,UAAU,4BAAf,UACE,cAACoF,EAAA,EAAD,CAAOC,IAAI,gBAAX,kBACA,eAACa,EAAA,EAAD,CACElG,UAAU,qBACVsC,KAAK,SACLzC,GAAG,gBACHyD,MAAOF,EACPuC,SA3KQ,SAAAG,GACpB,IAAMxC,EAAQ6C,SAASL,EAAEM,cAAc9C,OACvCnC,EACEM,EAAgBP,EAAMK,QAAS,CAC7BQ,KAAMmB,EACNpB,QAASwB,EACTpD,OAAQuD,EAAcH,MACtBzB,EAAGmB,EACH3C,WAAYsD,KAGhBN,EAAeC,IAiKH+C,MAAO,CACLC,MAAO,QACPC,QAAS,WACTC,mBAAoB,yDATxB,UAYE,wBAAQlD,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,mBAEF,cAAC8B,EAAA,EAAD,CAAOC,IAAI,gBAAX,4BAIN,cAAC,IAAD,CACEoB,UAAQ,EACRC,YAAU,EACVC,WAAS,EACTC,YAAU,EACVC,kBAAgB,EAChBvH,QAASA,EACTwH,SAAU,cAAC,IAAD,IACV9G,UAAU,kBACV+G,oBArJiB,WACvB,IAAMC,EAAQC,KAAKC,KAAKhF,EAAaQ,OAASU,GAE9C,OACE,cAAC,IAAD,CACE+D,cAAe,GACfC,UAAW,GACXC,UAAWL,GAAS,EACpBM,gBAAgB,SAChBC,UAA2B,IAAhBrE,EAAoBA,EAAc,EAAI,EACjDsE,aAAc,SAAAzF,GAAI,OAtEC,SAAAA,GACvBZ,EACEM,EAAgBP,EAAMK,QAAS,CAC7BQ,KAAMA,EAAK0F,SAAW,EACtB3F,QAASsB,EACTlD,OAAQuD,EAAcH,MACtBzB,EAAGmB,EACH3C,WAAYsD,KAGhBR,EAAepB,EAAK0F,SAAW,GA4DLC,CAAiB3F,IACvC4F,cAAe,YACfC,kBAAmB,YACnBC,cAAe,iBACfC,kBAAmB,iBACnBC,sBAAuB,YACvBC,kBAAmB,YACnBC,mBAAoB,6DAqIlB1F,KA9Ha,WACnB,IAAM2F,EAAU,CACdhI,OAAQuD,EAAcH,MACtBzB,EAAGmB,GAECmF,EAAajH,EAAMK,QAAQY,QAAO,SAACiG,GACvC,GAAIvE,KAAKC,MAAMsE,EAAQ/H,aAAeuD,GACpCC,KAAKC,MAAMsE,EAAQ/H,aAAe0D,EAClC,OAAOqE,KAILC,EAAaC,OAAOC,KAAKL,GAASM,MAAK,SAAUC,GACrD,OAAOP,EAAQO,GAAG/F,OAAS,KAG7B,OAAKM,GAAcY,GAASG,EACnBoE,EAAWO,MAAM,EAAGtF,GAClBlC,EAAMqB,KAAKG,OAAS,EACtBxB,EAAMqB,KACkB,IAAtBrB,EAAMqB,KAAKG,QAAgB2F,EAC7B,GAEAnH,EAAMK,QAAQmH,MAAM,EAAGtF,GAuGpBuF,Y,OCvQDC,UARG,WAChB,OACE,qBAAK5I,UAAU,gBAAf,SACE,cAAC6I,EAAD,Q","file":"static/js/158.ce2d1f95.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport moment from 'moment'\n\n// ** Third Party Components\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\n\nconst statusObj = {\n  Pending: 'light-warning',\n  Active: 'light-success',\n  Inactive: 'light-danger'\n}\n\nexport const columns = [\n  {\n    name: 'User Id',\n    minWidth: '120px',\n    selector: 'id',\n    sortable: true,\n    cell: row => row.id\n  },\n  {\n    name: 'Email',\n    minWidth: '320px',\n    selector: 'email',\n    sortable: true,\n    cell: row => row.email\n  },\n  {\n    name: 'Status',\n    minWidth: '100px',\n    selector: 'status',\n    sortable: true,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status]} pill>\n        {row.status}\n      </Badge>\n    )\n  },\n  {\n    name: 'Date Subscribed',\n    minWidth: '200px',\n    selector: 'created_at',\n    sortable: true,\n    cell: row => moment(row.created_at).format('lll')\n  },\n  {\n    name: 'Actions',\n    minWidth: '100px',\n    selector: 'fullName',\n    sortable: true,\n    cell: row => (\n      <UncontrolledDropdown>\n        <DropdownToggle tag='div' className='btn btn-sm'>\n          <MoreVertical size={14} className='cursor-pointer' />\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            tag={Link}\n            to={`/appia/admin/view/${row.admin_id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getFeedback(store.getState().appiaAdmins.allData, row.admin_id))}\n          >\n            <FileText size={14} className='mr-50' />\n            <span className='align-middle'>Details</span>\n          </DropdownItem>\n          <DropdownItem\n            tag={Link}\n            to={`/appia/admin/edit/${row.id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getFeedback(store.getState().appiaSubscribers.allData, row.admin_id))}\n          >\n            <Archive size={14} className='mr-50' />\n            <span className='align-middle'>Edit</span>\n          </DropdownItem>\n          <DropdownItem className='w-100'>\n            <Trash2 size={14} className='mr-50' />\n            <span className='align-middle'>Delete</span>\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    )\n  }\n]\n","import { paginateArray, apiRequest, swal } from '@utils'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/misc/subscribers', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_SUBSCRIBERS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\nexport const getFilteredData = (subscribers, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1, status = null} = params\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = subscribers.filter(\n      subscribe => (subscribe.email.toLowerCase().includes(queryLowered)) &&\n      subscribe.status === (status || subscribe.status)\n      )\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n\n// ** Columns\nimport { columns } from './columns'\nimport Flatpickr from 'react-flatpickr'\n\n// ** Store & Actions\nimport { getAllData, getFilteredData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors } from '@utils'\nimport { Card, CardHeader, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// import Breadcrumbs from '@components/breadcrumbs'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport FormGroup from 'reactstrap/lib/FormGroup'\n\n\nconst ContactsList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.appiaSubscribers)\n\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const [picker, setPicker] = useState(\"\")\n\n\n  const start = picker && Date.parse(picker[0])\n  const end = picker && Date.parse(picker[1])\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllData())\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: searchTerm,\n        created_at: picker\n      })\n    )\n  }, [dispatch])\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'Pending', label: 'Pending', number: 1 },\n    { value: 'Active', label: 'Active', number: 2 },\n    { value: 'Inactive', label: 'Inactive', number: 3 }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getFilteredData(store.allData, {\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: searchTerm,\n        created_at: picker\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: value,\n        status: currentStatus.value,\n        q: searchTerm,\n        created_at: picker\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: val,\n        created_at: picker\n      })\n    )\n  }\n\n  const handleRange = (date) => {\n    setPicker(date)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: searchTerm,\n        created_at: date\n      })\n    )\n  }\n\n  const filteredData = store.allData.filter(\n    item => (item.email.toLowerCase() || item.created_at.toLowerCase())\n  )\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Math.ceil(filteredData.length / rowsPerPage)\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      status: currentStatus.value,\n      q: searchTerm\n    }\n    const dateFilter = store.allData.filter((contact) => {\n      if (Date.parse(contact.created_at) >= start &&\n        Date.parse(contact.created_at) <= end) {\n        return contact\n      }\n    })\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (!searchTerm && start && end) {\n      return dateFilter.slice(0, rowsPerPage)\n    } else if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row  form className='mt-1 mb-50'>\n            <Col lg='4' md='6'>\n              <FormGroup>\n                <Label for='select'>Select Status:</Label>\n                <Select\n                  theme={selectThemeColors}\n                  isClearable={false}\n                  className='react-select'\n                  classNamePrefix='select'\n                  id='select'\n                  options={statusOptions}\n                  value={currentStatus}\n                  onChange={data => {\n                    setCurrentStatus(data)\n                    dispatch(\n                      getFilteredData(store.allData, {\n                        page: currentPage,\n                        perPage: rowsPerPage,\n                        status: data.value,\n                        q: searchTerm\n                      })\n                    )\n                  }}\n                />\n              </FormGroup>\n            </Col>\n            <Col lg=\"4\" md=\"6\">\n              <FormGroup>\n                <Label className='mb-0' for='search-invoice'>\n                  Search:\n              </Label>\n                <Input\n                  id='search-invoice'\n                  type=\"text\"\n                  value={searchTerm}\n                  placeholder='Email Search'\n                  onChange={e => handleFilter(e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n            {/* <Col md='4' className=\"d-flex mt-2\">\n              <Label className='mb-0 mt-1' for='range-picker'>Range: </Label>\n              <Flatpickr\n                value={picker}\n                id='range-picker'\n                className='form-control'\n                onChange={(handleRange)}\n                onChange={date => setPicker(date)}\n                options={{\n                  mode: 'range'\n                }}\n              />\n            </Col> */}\n          </Row>\n        </CardBody>\n      </Card>\n\n      <Card>\n        <Row className='mx-0 mt-3'>\n          <Col sm='6'>\n            <div className='d-flex align-items-center'>\n              <Label for='rows-per-page'>Show</Label>\n              <CustomInput\n                className='form-control mx-50'\n                type='select'\n                id='rows-per-page'\n                value={rowsPerPage}\n                onChange={handlePerPage}\n                style={{\n                  width: '10rem',\n                  padding: '0 0.8rem',\n                  backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n                }}\n              >\n                <option value='10'>10</option>\n                <option value='25'>25</option>\n                <option value='50'>50</option>\n              </CustomInput>\n              <Label for='rows-per-page'>Entries</Label>\n            </div>\n          </Col>\n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={dataToRender()}\n        />\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default ContactsList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst UsersList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default UsersList\n"],"sourceRoot":""}