{"version":3,"sources":["views/appia/settings/view/UpdateSetting.js","views/appia/settings/view/PlanCard.js","views/appia/settings/view/SettingInfoCard.js","views/appia/settings/view/index.js","views/appia/settings/store/action/index.js"],"names":["UpdateSettingSchema","Yup","shape","id","required","name","value","description","UpdateSetting","dispatch","useDispatch","useState","formModal","setFormModal","Button","Ripple","className","color","outline","block","onClick","Modal","isOpen","toggle","ModalHeader","initialValues","validationSchema","onSubmit","values","a","setSubmitting","updateSetting","payload","errors","touched","isSubmitting","ModalBody","FormGroup","htmlFor","type","placeholder","component","ModalFooter","disabled","Spinner","size","PlanCard","selectedSetting","Card","CardHeader","CardBody","SettingInfo","Row","Col","md","xs","avatar","src","alt","height","width","Math","floor","random","initials","content","contentStyles","borderRadius","fontSize","style","renderUserImg","CardText","moment","created_at","format","FeedbackView","props","store","useSelector","state","appiaSettings","useParams","undefined","xl","lg","SettingInfoCard","Alert","to","getAllData","apiRequest","url","method","response","data","success","console","log","error","swal","getFilteredData","settings","params","q","perPage","page","role","queryLowered","toLowerCase","filteredData","filter","setting","includes","paginateArray","totalPages","length","getSetting","find","i","body","JSON","stringify","message"],"mappings":"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","file":"static/js/193.b57bfa88.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Button, Spinner, Modal, ModalHeader, ModalBody, ModalFooter, Label, FormGroup, Input } from 'reactstrap'\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik'\nimport * as Yup from 'yup'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { updateSetting } from '../store/action'\n\nconst UpdateSettingSchema = Yup.object().shape({\n  id: Yup.number().required('Id is required'),\n  name: Yup.string().required('Name is required'),\n  value: Yup.string().required(\"Value isrequired\"),\n  description: Yup.string().required(\"Description isrequired\")\n})\n\nexport const UpdateSetting = () => {\n  const dispatch = useDispatch()\n  const [formModal, setFormModal] = useState(false)\n\n\n  return (\n    <div>\n      <Button.Ripple className='text-center mb-1' color='primary' outline block onClick={() => setFormModal(!formModal)}>\n        Update Setting\n      </Button.Ripple>\n      <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n        <ModalHeader toggle={() => setFormModal(!formModal)}>Update Setting</ModalHeader>\n        <Formik\n          initialValues={{\n                id: '',\n                name: '',\n                value: '',\n                description: ''\n          }}\n          validationSchema={UpdateSettingSchema}\n          onSubmit={async (values, { setSubmitting }) => {\n            await dispatch(updateSetting({payload:[values]}))\n            setSubmitting(false)\n            setFormModal(!formModal)\n          }}\n        >\n\n          {({ errors, touched, isSubmitting, values }) => (\n            <Form>\n              <ModalBody>\n                <FormGroup>\n                  <label htmlFor='id'>Setting Id</label>\n                  <Field\n                    type='number'\n                    name='id'\n                    placeholder='id'\n                    className={`form-control ${errors.id && touched.id && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='id' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='name'>Name</label>\n                  <Field\n                    type='text'\n                    name='name'\n                    placeholder='Name'\n                    className={`form-control ${errors.name && touched.name && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='name' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='value'>Value</label>\n                  <Field\n                    type='text'\n                    name='value'\n                    placeholder='Value'\n                    className={`form-control ${errors.value && touched.value && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='value' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='description'>Description</label>\n                  <Field\n                    type='text'\n                    name='description'\n                    placeholder='Description'\n                    className={`form-control ${errors.description && touched.description && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='description' component='div' className='field-error text-danger' />\n                </FormGroup>\n              </ModalBody>\n              <ModalFooter>\n                <Button.Ripple color='primary' type='submit' disabled={isSubmitting}>\n                  {isSubmitting && <Spinner color='white' size='sm' />}\n                  <span className='ml-50'>Update</span>\n                </Button.Ripple>\n              </ModalFooter>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </div>\n  )\n}\n\n\nexport default UpdateSetting\n","import { useState } from 'react'\n// ** Reactstrap\nimport { Card, CardHeader, CardBody, Badge, UncontrolledTooltip, Button } from 'reactstrap'\nimport UpdateSetting from './UpdateSetting'\n\nconst PlanCard = ({ selectedSetting }) => {\n\n  return (\n    <Card className='plan-card border-primary'>\n      <CardHeader className='d-flex justify-content-between align-items-center pt-75 pb-1'>\n        <h5 className='mb-0'>Actions</h5>\n      </CardHeader>\n      <CardBody>\n      <UpdateSetting />\n      </CardBody>\n    </Card>\n  ) \n}\n\nexport default PlanCard\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport moment from 'moment'\n\n// ** Third Party Components\nimport { Card, CardBody, CardText, Button, Row, Col } from 'reactstrap'\n// import { DollarSign, TrendingUp, User, Check, Star, Flag, Phone } from 'react-feather'\n\nconst SettingInfo = ({ selectedSetting }) => {\n  // ** render user img\n\n  const renderUserImg = () => {\n    if (selectedSetting !== null && selectedSetting.avatar) {\n      return <img src={selectedSetting.avatar} alt='user-avatar' className='img-fluid rounded' height='104' width='104' />\n    } else {\n      const stateNum = Math.floor(Math.random() * 6),\n        states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n        color = states[stateNum]\n      return (\n        <Avatar\n          initials\n          color={color}\n          className='rounded'\n          content={`${selectedSetting.name}`}\n          contentStyles={{\n            borderRadius: 0,\n            fontSize: 'calc(36px)',\n            width: '100%',\n            height: '100%'\n          }}\n          style={{\n            height: '90px',\n            width: '90px'\n          }}\n        />\n      )\n    }\n  }\n\n  return (\n    <Card>\n      <CardBody>\n        <Row className='my-2'>\n          <Col className='d-flex align-items-center justify-content-center mb-2 mb-md-0' md='5' xs='12'>\n            <div className='d-flex justify-content-start'>\n              {renderUserImg()}\n            </div>\n          </Col>\n          <div className='d-flex flex-column ml-1'>\n            <Col>\n            <h4>Name: { selectedSetting !== null ? `${selectedSetting.name}` : 'Appia Admin'}</h4>\n              {/* <CardText className=\"mt-1\">\n                Email: { selectedSetting !== null ? selectedSetting.email : 'appia.admin@appiawave.com'}\n              </CardText> */}\n              <CardText className=\"mt-1\">Setting Id: { selectedSetting.id}</CardText>\n              <hr />\n              <div className=\"d-flex\">\n                <h6>\n                  Value: <span>{selectedSetting.value}</span>\n                </h6>\n                <h6 className=\"ml-5\">Date <span>{moment(selectedSetting.created_at).format('lll')}</span></h6>\n              </div>\n              <br />\n            </Col>\n          </div>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SettingInfo\n","// ** React Imports\nimport { useParams, Link } from 'react-router-dom'\nimport moment from 'moment'\n\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport PlanCard from './PlanCard'\nimport SettingInfoCard from './SettingInfoCard'\n// import InvoiceList from '../../invoice/list'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst FeedbackView = props => {\n  // ** Vars\n  const store = useSelector(state => state.appiaSettings),\n    { id } = useParams()\n\n\n  return store.selectedSetting !== null && store.selectedSetting !== undefined ? (\n    <div className='app-user-view'>\n      <Row>\n        <Col xl='9' lg='8' md='7'>\n          <SettingInfoCard selectedSetting={store.selectedSetting} />\n        </Col>\n        <Col xl='3' lg='4' md='5'>\n          <PlanCard selectedSetting={store.selectedSetting} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Users not found</h4>\n      <div className='alert-body'>\n        Users with id: {id} doesn't exist. Check list of all Users: <Link to='/app/user/list'>Users List</Link>\n      </div>\n    </Alert>\n  )\n}\nexport default FeedbackView\n","import axios from 'axios'\nimport { paginateArray, sortCompare, apiRequest, swal } from '@utils'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/settings', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_SETTINGS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n// ** Get filtered data on page or row change\nexport const getFilteredData = (settings, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1, role = null} = params\n\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = settings.filter(\n      setting =>\n        (setting.name.toLowerCase().includes(queryLowered))\n    )\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\nexport const getSetting = (settings, id) => {\n  return async dispatch => {\n    const setting = settings.find(i => i.id === id)\n    dispatch({\n      type: 'GET_SETTING',\n      selectedSetting: setting\n    })\n  }\n}\n\nexport const updateSetting = (values) => {\n  return async dispatch => {\n    const body = JSON.stringify(values)\n    const response = await apiRequest({url:`/admin/settings/update`, method:'POST', body}, dispatch)\n    if (response && response.data.success) {\n      swal('Good!', `${response.data.message}.`, 'success')\n      dispatch(getAllData())\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}"],"sourceRoot":""}