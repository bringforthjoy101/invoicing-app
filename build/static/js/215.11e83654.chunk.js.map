{"version":3,"sources":["views/appia/transaction/view/UserInfoCard.js","views/appia/transaction/view/index.js","views/appia/transaction/store/action/index.js"],"names":["UserInfoCard","selectedTransaction","Card","CardBody","Row","Col","xl","lg","className","avatar","src","alt","height","width","color","Math","floor","random","initials","content","user","names","contentStyles","borderRadius","fontSize","style","renderImg","CardText","tag","email","username","phone","trans_id","trans_type","trans_amount","toLocaleString","currency","balance","narration","moment","trans_date","format","UserView","props","store","useSelector","state","appiaTransaction","dispatch","useDispatch","id","useParams","useState","setUserData","detail","useEffect","getTransaction","allData","isUserLoggedIn","JSON","parse","localStorage","getItem","undefined","md","Alert","to","getAllData","a","apiRequest","url","method","response","data","success","type","console","log","swal","getFilteredData","transactions","params","q","perPage","page","queryLowered","toLowerCase","filteredData","filter","transaction","includes","paginateArray","totalPages","length","find","i"],"mappings":"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","file":"static/js/215.11e83654.chunk.js","sourcesContent":["// ** React Imports\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { Card, CardBody, CardText, Row, Col } from 'reactstrap'\nimport moment from 'moment'\n\n\nconst UserInfoCard = ({ selectedTransaction }) => {\n\n  const renderImg = () => {\n    if (selectedTransaction !== null && selectedTransaction.avatar) {\n      return <img src={selectedTransaction.avatar} alt='user-avatar' className='img-fluid rounded' height='104' width='104' />\n    } else {\n      const stateNum = Math.floor(Math.random() * 6),\n        states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n        color = states[stateNum]\n      return (\n        <Avatar\n          initials\n          color={color}\n          className='rounded'\n          content={selectedTransaction.user.names}\n          contentStyles={{\n            borderRadius: 0,\n            fontSize: 'calc(36px)',\n            width: '100%',\n            height: '100%'\n          }}\n          style={{\n            height: '90px',\n            width: '90px'\n          }}\n        />\n      )\n    }\n  }\n\n  return (\n    <Card>\n      <CardBody>\n        <Row>\n          <Col xl='6' lg='12' className='d-flex flex-column justify-content-between border-container-lg'>\n            <div className='user-avatar-section'>\n              <h3>User Details</h3>\n              <div className='d-flex justify-content-start'>\n                {renderImg()}\n                <div className='d-flex flex-column ml-1'>\n                  <div className='user-info mt-2'>\n                    <h4 className='mb-0'>{selectedTransaction !== null ? selectedTransaction.user.names : 'Eleanor Aguilar'}</h4>\n                    <CardText tag='span'>\n                      {selectedTransaction !== null ? selectedTransaction.user.email : 'eleanor.aguilar@gmail.com'}\n                    </CardText>\n                  </div>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Username: </span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.user.username !== null ? selectedTransaction.user.username : 'No Username'}</h6>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Phone:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.user.phone}</h6>\n                </div>\n              </div>\n            </div>\n          </Col>\n          <Col xl='6' lg='12' className='d-flex flex-column justify-content-between border-container-lg'>\n            <div className='user-avatar-section'>\n              <h3>Transaction Details</h3>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Transaction Id: </span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.trans_id}</h6>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Transaction Type:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.trans_type}</h6>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Transaction Amount:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.trans_amount.toLocaleString('en-US', { style: 'currency', currency: 'NGN' })}</h6>\n                </div>\n              </div><div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Balance:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.balance.toLocaleString('en-US', { style: 'currency', currency: 'NGN' })}</h6>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Narration:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{selectedTransaction.narration}</h6>\n                </div>\n              </div>\n              <div className='d-flex align-items-center mr-2 mt-1'>\n                <div className='color-box'>\n                  <span>Transaction Date:</span>\n                </div>\n                <div className='ml-1'>\n                  <h6 className='mb-0'>{moment(selectedTransaction.trans_date).format('lll')}</h6>\n                </div>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default UserInfoCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getTransaction } from '../store/action'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap\nimport { Row, Col, Alert, Button } from 'reactstrap'\n\n// ** User View Components\nimport UserInfoCard from './UserInfoCard'\nimport { isUserLoggedIn, apiRequest, swal } from '@utils'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst UserView = props => {\n  // ** Vars\n  const store = useSelector(state => state.appiaTransaction),\n    dispatch = useDispatch(),\n    { id } = useParams()\n\n  const [userData, setUserData] = useState(null)\n  const [detail, setDetail] = useState(null)\n\n  // ** Get user on mount\n  useEffect(() => {\n    dispatch(getTransaction(store.allData, id))\n  }, [dispatch])\n\n\n  useEffect(() => {\n    if (isUserLoggedIn() !== null) {\n      setUserData(JSON.parse(localStorage.getItem('userData')))\n    }\n  }, [])\n\n\n  return store.selectedTransaction !== null && store.selectedTransaction !== undefined ? (\n    <div className='app-user-view'>\n      <Row>\n        <Col xl='9' lg='8' md='7'>\n          <UserInfoCard selectedTransaction={store.selectedTransaction} detail={detail} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Users not found</h4>\n      <div className='alert-body'>\n        Users with id: {id} doesn't exist. Check list of all Users: <Link to='/appia/user/list'>Users List</Link>\n      </div>\n    </Alert>\n  )\n}\nexport default UserView\n","import { paginateArray, sortCompare, apiRequest, swal } from '@utils'\n\nexport const apiUrl = process.env.REACT_APP_API_ENDPOINT\n\n// ** Get all User Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({url:'/admin/users/transactions/all', method:'POST'}, dispatch)\n    if (response && response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_TRANSACTIONS_DATA',\n          data: response.data.data\n        })\n    } else {\n      console.log(response)\n      swal('Oops!', 'Something went wrong.', 'error')\n    }\n  }\n}\n\n// All Users Filtered Data\nexport const getFilteredData = (transactions, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 100,  page = 1 } = params\n\n    /* eslint-disable  */\n    const queryLowered = q?.toLowerCase()\n    const filteredData = transactions?.filter(\n      transaction => \n        (transaction?.trans_id?.toLowerCase()?.includes(queryLowered) || transaction?.trans_type?.toLowerCase()?.includes(queryLowered))\n      )\n  \n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_TRANSACTION_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\n//  Get User\nexport const getTransaction = (transactions, id) => {\n  return async dispatch => {\n    const transaction = transactions.find(i => i.trans_id === id)\n    dispatch({\n      type: 'GET_TRANSACTION',\n      selectedTransaction: transaction\n    })\n  }\n}\n\n"],"sourceRoot":""}