{"version":3,"sources":["views/appia/settings/list/columns.js","views/appia/settings/list/Table.js","views/appia/settings/list/index.js","views/appia/settings/store/action/index.js"],"names":["renderClient","row","color","Math","floor","random","avatar","className","img","width","height","content","name","initials","columns","minWidth","selector","sortable","cell","to","id","onClick","store","dispatch","getSetting","getState","appiaSettings","allData","description","value","moment","created_at","format","UncontrolledDropdown","DropdownToggle","tag","size","DropdownMenu","right","DropdownItem","Link","admin_id","getFeedback","FeedbacksList","useDispatch","useSelector","state","useState","searchTerm","setSearchTerm","currentPage","setCurrentPage","rowsPerPage","useEffect","getAllData","getFilteredData","page","perPage","q","filteredData","filter","item","toLowerCase","Card","CardHeader","CardTitle","CardBody","Row","Col","md","Label","for","Input","type","placeholder","onChange","e","val","target","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","paginationComponent","count","ceil","length","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","data","filters","isFiltered","Object","keys","some","k","slice","dataToRender","Table","a","apiRequest","url","method","response","success","console","log","error","swal","settings","params","role","queryLowered","setting","includes","paginateArray","totalPages","find","i","selectedSetting","updateSetting","values","body","JSON","stringify","message"],"mappings":"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","file":"static/js/172.bddd84c1.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { getSetting } from '../store/action'\nimport { store } from '@store/storeConfig/store'\nimport moment from 'moment'\n\n// ** Third Party Components\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { Slack, User, Settings, Database, Edit, MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  const stateNum = Math.floor(Math.random() * 6),\n    states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n    color = states[stateNum]\n\n  if (row.avatar) {\n    return <Avatar className='mr-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return <Avatar color={color || 'primary'} className='mr-1' content={`${row.name}` || 'John Doe'} initials />\n  }\n}\n\nexport const columns = [\n  {\n    name: 'Name',\n    minWidth: '297px',\n    selector: 'name',\n    sortable: true,\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center'>\n        {renderClient(row)}\n        <div className='d-flex flex-column'>\n          <Link\n            to={`/appia/settings/view/${row.id}`}\n            className='user-name text-truncate mb-0'\n            onClick={() => store.dispatch(getSetting(store.getState().appiaSettings.allData, row.id))}\n          >\n            <span className='font-weight-bold'>{row.name}</span>\n          </Link>\n          <small className='text-truncate text-muted mb-0'> Setting Id: {row.id}</small>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Description',\n    minWidth: '280px',\n    selector: 'description',\n    sortable: true,\n    cell: row => (\n      <div>\n        <span>{ row.description !== null ? row.description : \"An Update\" }</span>\n      </div>\n    )\n  },\n  {\n    name: 'Value',\n    minWidth: '200px',\n    selector: 'value',\n    sortable: true,\n    cell: row => row.value\n  },\n  {\n    name: 'Date',\n    minWidth: '200px',\n    selector: 'created_at',\n    sortable: true,\n    cell: row => moment(row.created_at).format('lll')\n  },\n  {\n    name: 'Actions',\n    minWidth: '100px',\n    selector: 'fullName',\n    sortable: true,\n    cell: row => (\n      <UncontrolledDropdown>\n        <DropdownToggle tag='div' className='btn btn-sm'>\n          <MoreVertical size={14} className='cursor-pointer' />\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            tag={Link}\n            to={`/appia/admin/view/${row.admin_id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getFeedback(store.getState().appiaSettings.allData, row.admin_id))}\n          >\n            <FileText size={14} className='mr-50' />\n            <span className='align-middle'>Details</span>\n          </DropdownItem>\n          <DropdownItem\n            tag={Link}\n            to={`/appia/admin/edit/${row.id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getFeedback(store.getState().appiaSettings.allData, row.admin_id))}\n          >\n            <Archive size={14} className='mr-50' />\n            <span className='align-middle'>Edit</span>\n          </DropdownItem>\n          <DropdownItem className='w-100'>\n            <Trash2 size={14} className='mr-50' />\n            <span className='align-middle'>Delete</span>\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    )\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n\n// ** Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllData, getFilteredData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors } from '@utils'\nimport { Card, CardHeader, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\n// ** Table Header\nconst CustomHeader = ({ handlePerPage, rowsPerPage }) => {\n  return (\n    <div className='invoice-list-table-header w-100 mr-1 ml-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <Label for='rows-per-page'>Show</Label>\n            <CustomInput\n              className='form-control mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{\n                width: '10rem',\n                padding: '0 0.8rem',\n                backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n              }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n            </CustomInput>\n            <Label for='rows-per-page'>Entries</Label>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst FeedbacksList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.appiaSettings)\n\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllData())\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: searchTerm\n      })\n    )\n  }, [dispatch])\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getFilteredData(store.allData, {\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        q: searchTerm\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: value,\n        q: searchTerm\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getFilteredData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: val\n      })\n    )\n  }\n\n  const filteredData = store.allData.filter(\n    item => (item.name.toLowerCase())\n  )\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Math.ceil(filteredData.length / rowsPerPage)\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      q: searchTerm\n    }\n\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md=\"4\" className=\"d-flex\">\n              <Label className='mb-0 mt-1' for='search-invoice'>\n                Search:\n            </Label>\n              <Input\n                id='search-invoice'\n                className='ml-50 w-100'\n                type='text'\n                value={searchTerm}\n                placeholder='name and description search'\n                onChange={e => handleFilter(e.target.value)}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n     \n       <DataTable\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={dataToRender()}\n        />\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default FeedbacksList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst FeedbacksList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default FeedbacksList\n","import { paginateArray, apiRequest, swal } from '@utils'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/settings', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_SETTINGS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n// ** Get filtered data on page or row change\nexport const getFilteredData = (settings, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1, role = null} = params\n\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = settings.filter(\n      setting =>\n        (setting.name.toLowerCase().includes(queryLowered))\n    )\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\nexport const getSetting = (settings, id) => {\n  return async dispatch => {\n    const setting = settings.find(i => i.id === id)\n    dispatch({\n      type: 'GET_SETTING',\n      selectedSetting: setting\n    })\n  }\n}\n\nexport const updateSetting = (values) => {\n  return async dispatch => {\n    const body = JSON.stringify(values)\n    const response = await apiRequest({url:`/admin/settings/update`, method:'POST', body}, dispatch)\n    if (response && response.data.success) {\n      swal('Good!', `${response.data.message}.`, 'success')\n      dispatch(getAllData())\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}"],"sourceRoot":""}