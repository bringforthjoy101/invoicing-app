{"version":3,"sources":["views/appia/settings/store/action/index.js","views/appia/settings/list/EditSetting.js","views/appia/settings/list/SettingsDetails.js","views/appia/settings/list/index.js"],"names":["getAllData","dispatch","a","apiRequest","url","method","response","console","log","data","success","type","error","swal","updateSetting","values","body","JSON","stringify","message","UpdateSettingSchema","Yup","shape","id","required","name","value","description","EditSetting","useDispatch","useState","formModal","setFormModal","Button","Ripple","className","color","outline","onClick","Modal","isOpen","toggle","ModalHeader","initialValues","validationSchema","onSubmit","setSubmitting","payload","errors","touched","isSubmitting","ModalBody","FormGroup","htmlFor","placeholder","component","ModalFooter","disabled","Spinner","size","SettingInfo","allData","Card","CardTitle","CardBody","Row","map","SettingsLIst","store","useSelector","state","appiaSettings","useEffect"],"mappings":"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","file":"static/js/192.9f436671.chunk.js","sourcesContent":["import { paginateArray, apiRequest, swal } from '@utils'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/settings', method: 'GET' }, dispatch)\n    console.log({response})\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_SETTINGS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\nexport const getSetting = (settings, id) => {\n  return async dispatch => {\n    const setting = settings.find(i => i.id === id)\n    dispatch({\n      type: 'GET_SETTING',\n      selectedSetting: setting\n    })\n  }\n}\n\nexport const updateSetting = (values) => {\n  return async dispatch => {\n    const body = JSON.stringify(values)\n    const response = await apiRequest({url:`/admin/settings/update`, method:'POST', body}, dispatch)\n    console.log({response})\n    if (response && response.data.success) {\n      swal('Good!', `${response.data.message}.`, 'success')\n      dispatch(getAllData())\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}","import { useState } from 'react'\nimport { Button, Spinner, Modal, ModalHeader, ModalBody, ModalFooter, Label, FormGroup, Input } from 'reactstrap'\nimport { Edit } from 'react-feather'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { updateSetting } from '../store/action'\n\n\nconst UpdateSettingSchema = Yup.object().shape({\n    id: Yup.number().required('Id is required'),\n    name: Yup.string().required('Name is required'),\n    value: Yup.string().required(\"Value isrequired\"),\n    description: Yup.string().required(\"Description isrequired\")\n  })\nexport const EditSetting = ({ data}) => {\n  const dispatch = useDispatch()\n  const [formModal, setFormModal] = useState(false)\n\n\n  return (\n    <div>\n      <Button.Ripple className='text-center mb-1' color='primary' outline  onClick={() => setFormModal(!formModal)}>\n        <Edit /> Edit\n      </Button.Ripple>\n      <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-left'>\n        <ModalHeader toggle={() => setFormModal(!formModal)}>Edit Setting</ModalHeader>\n        <Formik\n          initialValues={{\n            id: data.id,\n            name: data.name,\n            value: '',\n            description: ''\n          }}\n          validationSchema={UpdateSettingSchema}\n          onSubmit={async (values, { setSubmitting }) => {\n            await dispatch(updateSetting({payload:[values]}))\n            setSubmitting(false)\n            setFormModal(!formModal)\n          }}\n        >\n\n          {({ errors, touched, isSubmitting }) => (\n            <Form>\n              <ModalBody>\n                <FormGroup>\n                  <label htmlFor='id'>Id</label>\n                  <Field\n                    type='id'\n                    name='id'\n                    placeholder='Id'\n                    className={`form-control ${errors.id && touched.id && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='id' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='name'>Name</label>\n                  <Field\n                    type='text'\n                    name='name'\n                    placeholder='Name'\n                    className={`form-control ${errors.name && touched.name && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='name' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='value'>Value</label>\n                  <Field\n                    type='text'\n                    name='value'\n                    placeholder='value'\n                    className={`form-control ${errors.value && touched.value && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='value' component='div' className='field-error text-danger' />\n                </FormGroup>\n                <FormGroup>\n                  <label htmlFor='description'>Description</label>\n                  <Field\n                    type='text'\n                    name='description'\n                    placeholder='Description'\n                    className={`form-control ${errors.description && touched.description && 'is-invalid'}`}\n                  />\n                  <ErrorMessage name='description' component='div' className='field-error text-danger' />\n                </FormGroup>\n              </ModalBody>\n              <ModalFooter>\n                <Button.Ripple color='primary' type='submit' disabled={isSubmitting}>\n                  {isSubmitting && <Spinner color='white' size='sm' />}\n                  <span className='ml-50'>Update</span>\n                </Button.Ripple>\n              </ModalFooter>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </div>\n  )\n}\nexport default EditSetting\n","// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { Card, CardBody, CardTitle, Button, CardText, Row, Col } from 'reactstrap'\nimport EditSetting from './EditSetting'\n\nconst SettingInfo = ({ allData }) => {\n\n\n  return (\n    <Card className=\"p-5\">\n      <CardTitle>\n        <h1>\n          Settings\n        </h1>\n      </CardTitle>\n      <hr/>\n      <CardBody>\n        <Row>\n          {allData.map((data) => <div key={data.id} className=' py-2 pr-5'>\n            <h4>Name: {data.name}</h4>\n            <h6>Value: {data.value} </h6>\n            <p>Description: {data.description !== '' ? data.description : \"No Description\"}</p>\n            <EditSetting data={data} />\n            <hr />\n          </div>\n          )}\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SettingInfo\n","import { Fragment, useState, useEffect } from 'react'\n// ** User List Component\nimport Settings from './SettingsDetails'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\n// ** Store & Actions\nimport { getAllData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst SettingsLIst = () => {\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.appiaSettings)\n\n  useEffect(() => {\n    dispatch(getAllData())\n  }, [dispatch])\n\n  return (\n    <div className='app-user-list'>\n      <Settings allData={store.allData} />\n    </div>\n  )\n}\n\nexport default SettingsLIst\n"],"sourceRoot":""}