{"version":3,"sources":["@core/auth/jwt/jwtDefaultConfig.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js","@core/auth/jwt/jwtService.js","views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","appiaLoginEndpoint","process","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","jwt","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","accessToken","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","push","localStorage","getItem","value","setItem","args","post","getRefreshToken","ToastContentValid","name","role","className","size","color","icon","ToastContentInvalid","message","Login","props","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","isSubmitting","setIsSubmitting","illustration","source","require","default","Row","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","Col","lg","sm","src","alt","md","CardTitle","tag","CardText","onSubmit","event","errors","length","useJwt","login","res","success","token","action","subject","avatar","extras","eCommerceCartItemsCount","handleLogin","update","getHomeRouteForLoggedInUser","role_name","toast","first_name","last_name","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","FormGroup","Label","for","required","autoFocus","type","placeholder","onChange","target","AvInput","autoComplete","CustomInput","label","Button","Ripple","block","disabled","Spinner","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","rest","inputVisibility","setInputVisibility","classnames","addonType","renderIcon","defaultProps"],"mappings":"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","file":"static/js/197.760c7359.chunk.js","sourcesContent":["// Api Url\nexport const apiUrl = process.env.REACT_APP_API_ENDPOINT\n\n// ** Auth Endpoints\nexport default {\n  loginEndpoint: '/jwt/login',\n  registerEndpoint: '/jwt/register',\n  refreshEndpoint: '/jwt/refresh-token',\n  logoutEndpoint: '/jwt/logout',\n  appiaLoginEndpoint: `${apiUrl}/admin/sign_in`,\n\n  // ** This will be prefixed in authorization header with token\n  // ? e.g. Authorization: Bearer <token>\n  tokenType: 'Bearer',\n\n  // ** Value of this property will be used as key to store JWT token in storage\n  storageTokenKeyName: 'accessToken',\n  storageRefreshTokenKeyName: 'refreshToken'\n}\n","// ** Core JWT Import\nimport useJwt from '@src/@core/auth/jwt/useJwt'\n\nconst { jwt } = useJwt({})\n\nexport default jwt\n","// ** JWT Service Import\nimport JwtService from './jwtService'\n\n// ** Export Service as useJwt\nexport default function useJwt(jwtOverrideConfig) {\n  const jwt = new JwtService(jwtOverrideConfig)\n\n  return {\n    jwt\n  }\n}\n","import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  // login(...args) {\n  //   return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  // }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.appiaLoginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n","import { useState, useContext, Fragment } from 'react'\nimport Avatar from '@components/avatar'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport {\n  Alert,\n  Row,\n  Col,\n  CardTitle,\n  CardText,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  Spinner,\n  UncontrolledTooltip\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContentValid = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Appia. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\n\nconst ToastContentInvalid = ({ message }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>{message}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>invalid</span>\n    </div>\n  </Fragment>\n)\n\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n    const handleSubmit = (event, errors) => {\n      if (errors && !errors.length) {\n        setIsSubmitting(true)\n        useJwt\n          .login({ email, password })\n          .then(res => {\n            if (res.data.success) {\n              const data = { \n                ...res.data.data, \n                accessToken: res.data.token, \n                refreshToken: res.data.token,\n                ability: [{action: \"manage\", subject: \"all\"}],\n                avatar: \"/demo/Appia-react-admin-dashboard-template/demo-1/static/media/avatar-s-11.1d46cc62.jpg\",\n                extras: {eCommerceCartItemsCount: 5}\n              }\n              dispatch(handleLogin(data))\n              ability.update(data.ability)\n              history.push(getHomeRouteForLoggedInUser(data.role_name))\n              toast.success(\n                <ToastContentValid name={`${data.first_name} ${data.last_name}` || data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n                { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n              )\n            } else {\n              toast.error(\n                <ToastContentInvalid message={`${res.data.message}` || 'admin'} />,\n                { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n              )\n              setIsSubmitting(false)\n            }\n          })\n          .catch(err => console.log(err))\n      }\n    }\n\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ml-1'>Appia</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Welcome to Appia! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <AvForm className='auth-login-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <AvInput\n                  required\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <InputPasswordToggle\n                  required\n                  tag={AvInput}\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  autoComplete= 'on'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\n              </FormGroup>\n              <Button.Ripple color='primary' block disabled={isSubmitting}>\n                {isSubmitting && <Spinner color='white' size='sm' />}\n                <span className='ml-50'>Sign In</span>\n              </Button.Ripple>\n            </AvForm>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}